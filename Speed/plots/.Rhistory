# Create system of notes
notes <- c("C", "C#", "D", "Eb", "E", "F", "F#", "G", "G#", "A", "Bb", "B")
allnotes <- character()
for (i in 3:8) {
for (j in 1:length(notes)) {
allnotes = c(allnotes, paste0(notes[j],i))
}
}
# Adding Collatz numbers
collatz_stop <- function(N) {
# Returns steps needed for the series to reach 1
steps = 0
while (N != 1) {
if (N %% 2 == 0) {
N = N/2
} else {
N = 3 * N + 1
}
steps = steps + 1
}
return(steps)
}
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
plot(collatz)
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
?rle
rle(c(1,2,3,4))
rle(c(1,2,3,4,1,1,1))
rle(c(1,1,2,2,1,1))
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 300
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
q()
# install.packages("music")
library(music)
# Create system of notes
notes <- c("C", "C#", "D", "Eb", "E", "F", "F#", "G", "G#", "A", "Bb", "B")
allnotes <- character()
for (i in 3:8) {
for (j in 1:length(notes)) {
allnotes = c(allnotes, paste0(notes[j],i))
}
}
# Adding Collatz numbers
collatz_stop <- function(N) {
# Returns steps needed for the series to reach 1
steps = 0
while (N != 1) {
if (N %% 2 == 0) {
N = N/2
} else {
N = 3 * N + 1
}
steps = steps + 1
}
return(steps)
}
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
length(unique(collatz))
keys <- sort(unique(collatz))
plot(collatz)
# Code that turns the first 200 integers' Collatz's stopping times into music and plays it
# install.packages("music")
library(music)
# Create system of notes
notes <- c("C", "C#", "D", "Eb", "E", "F", "F#", "G", "G#", "A", "Bb", "B")
allnotes <- character()
for (i in 3:8) {
for (j in 1:length(notes)) {
allnotes = c(allnotes, paste0(notes[j],i))
}
}
# Adding Collatz numbers
collatz_stop <- function(N) {
# Returns steps needed for the series to reach 1
steps = 0
while (N != 1) {
if (N %% 2 == 0) {
N = N/2
} else {
N = 3 * N + 1
}
steps = steps + 1
}
return(steps)
}
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
# Create durations
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 300
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
s <- Sys.time()
a <- Sys.time() - s
a
difftime(Sys.time(),s)
difftime(Sys.time(),s, units = "secs")
a <- matrix(c(5,1,3,1,1,1,1,2,1), nrow = 3, ncol = 3, byrow=T)
a
b <- matrix(c(1,2,3), nrow = 1)
a*b
b <- matrix(c(1,2,3), nrow = 3)
a*b
dim(b)
dim(a)
a*b
a%*%b
b <- matrix(c(1,2,3,4,5,6), nrow = 3)
b
b <- matrix(c(1,2,3,4,5,6), nrow = 3, byrow = T)
b
a
a%*%b
covid <- fread("https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv")
require(data.table)
covid <- fread("https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv")
View(covid)
covid <- fread("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
head(covid)
require(plyr)
require(dplyr)
max(covid$date)
covid <- covid[covid$date = max(covid$date),]
covid <- covid[covid$date == max(covid$date),]
View(covid)
covid[order(total_deaths_per_million)]
covid[order(-total_deaths_per_million)]
head(covid)
View(covid)
head(covid)
View(covid[,c("location", "total_deaths_per_million")])
View(covid[,c("date", "location", "total_deaths_per_million")])
?svglite
library(svglite)
?svglite
library(data.table)
library(RColorBrewer)
col_wb <- '#F6F7EB'
co <- brewer.pal(7, "Set1")[2]
co2 <- brewer.pal(7, "Set1")[1]
data <- fread("../code/x.csv")
R <- data[,list(min(time), mean(time), median(time),
max(time)), keyby = list(language, operation)]
cols <-  c("Min", "Mean", "Median", "Max")
colnames(R)[3:6] <- cols
library(svglite)
library(data.table)
library(RColorBrewer)
col_wb <- '#F6F7EB'
co <- brewer.pal(7, "Set1")[2]
co2 <- brewer.pal(7, "Set1")[1]
setwd("~/Documents/Projects/Speed/plots")
data <- fread("../code/x.csv")
R <- data[,list(min(time), mean(time), median(time),
max(time)), keyby = list(language, operation)]
cols <-  c("Min", "Mean", "Median", "Max")
colnames(R)[3:6] <- cols
R <- R[,(cols) := round(.SD,1), .SDcols=cols]
extra_row <- data.frame("Matlab", "read_compressed", NA, NA, NA, NA)
names(extra_row) <- names(R)
R <- rbind(R, extra_row)
R[order(operation, Median)]
compressed <- R[operation == "read_compressed", c("language", "Median")]
compressed$Median <- compressed$Median/min(compressed$Median, na.rm = TRUE)
compressed <- compressed[order(Median)]
uncompressed <- R[operation == "read_uncompressed", c("language", "Median")]
uncompressed$Median <- uncompressed$Median/min(uncompressed$Median, na.rm = TRUE)
uncompressed <- uncompressed[order(Median)]
process <- R[operation == "process", c("language", "Median")]
process$Median <- process$Median/min(process$Median, na.rm = TRUE)
process <- process[order(Median)]
plot_vox <- function(dt, title) {
par(mar = c(2,2,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(dt$Median, names.arg = dt$language, main = title, yaxt = "n",
col = co, ylim = c(0,ceiling(max(dt$Median, na.rm = TRUE))), border = F)
axis(2, seq(0,ceiling(max(dt$Median, na.rm = TRUE))), las = 1)
text(x, dt$Median + 0.1, labels = format(round(dt$Median,2), nsmall = 2), col = col_wb)
if (is.na(dt$Median[length(dt$Median)])) text(x[length(x)], 1.5, "Matlab \n cannot \n read \n compressed \n files", srt=0, col = col_wb)
}
# Plotting both running times
loading <- rbind(R[operation == "read_uncompressed", c("language", "Median")][order(language)]$Median,
R[operation == "read_compressed", c("language","Median")][order(language)]$Median)
loading <- loading/min(loading, na.rm = TRUE)
rownames(loading) <- c("Uncompressed", "Compressed")
colnames(loading) <- sort(unique(R$language))
loading <- loading[,names(sort(loading[1,]))]
plot_two <- function(){
par(mar = c(2,2,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(loading, main = "Loading time relative to fastest", yaxt = "n", beside = TRUE,
col = c(co,co2), ylim = c(0,ceiling(max(loading, na.rm = TRUE))), border = F)
axis(2, seq(0,ceiling(max(loading, na.rm = TRUE))), las = 1)
text(x, loading + 0.1, labels = format(round(loading,2), nsmall = 2), col = col_wb)
legend("topleft", col = c(co, co2), legend = c("Uncompressed", "Compressed"),
pch = 15, bty = "n", text.col = col_wb)
if (is.na(loading["Compressed", "Matlab"])) text(x[length(x)]+0.2, 2, "Matlab \n cannot \n read \n compressed \n files", srt=0, cex = 0.8, col = col_wb)
}
garch <- fread("../garch/x.csv")
garch$time <- garch$time/min(garch$time)
garch <- garch[order(time), c("language", "time")]
garch$language <- c("C", "Rcpp", "Numba", "Julia", "Matlab", "R", "Python")
plot_garch <- function() {
par(mar = c(2.5,3.5,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(garch$time, names.arg = garch$language,  log = "y",
col = co, border = F, yaxt = "n", las = 1, ylim = c(0.5, 500),
main = "Calculation of GARCH log likelihood \n Relative to C")
offset <- rep(0.1,length(garch$time))
offset[length(garch$time)] <- 0
text(x-offset, garch$time*1.2, labels = format(round(garch$time,2), nsmall = 2), col = col_wb)
Ticks<-c(1,2,5,10, 20, 50, 100, 250, 500)
axis(2,at = Ticks, las = 1)
}
# Svg
svglite("svg/uncompressed.svg", bg = NA)
plot_vox(uncompressed, "Loading time relative to fastest - Uncompressed")
dev.off()
# Svg
svglite("svg/uncompressed.svg", bg = "transparent")
plot_vox(uncompressed, "Loading time relative to fastest - Uncompressed")
dev.off()
# Speed -------------------------------------------------------------------
library(svglite)
library(data.table)
library(RColorBrewer)
col_wb <- '#F6F7EB'
co <- brewer.pal(7, "Set1")[2]
co2 <- brewer.pal(7, "Set1")[1]
data <- fread("../code/x.csv")
R <- data[,list(min(time), mean(time), median(time),
max(time)), keyby = list(language, operation)]
cols <-  c("Min", "Mean", "Median", "Max")
colnames(R)[3:6] <- cols
R <- R[,(cols) := round(.SD,1), .SDcols=cols]
extra_row <- data.frame("Matlab", "read_compressed", NA, NA, NA, NA)
names(extra_row) <- names(R)
R <- rbind(R, extra_row)
R[order(operation, Median)]
compressed <- R[operation == "read_compressed", c("language", "Median")]
compressed$Median <- compressed$Median/min(compressed$Median, na.rm = TRUE)
compressed <- compressed[order(Median)]
uncompressed <- R[operation == "read_uncompressed", c("language", "Median")]
uncompressed$Median <- uncompressed$Median/min(uncompressed$Median, na.rm = TRUE)
uncompressed <- uncompressed[order(Median)]
process <- R[operation == "process", c("language", "Median")]
process$Median <- process$Median/min(process$Median, na.rm = TRUE)
process <- process[order(Median)]
plot_vox <- function(dt, title) {
par(mar = c(2,2,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(dt$Median, names.arg = dt$language, main = title, yaxt = "n",
col = co, ylim = c(0,ceiling(max(dt$Median, na.rm = TRUE))), border = F)
axis(2, seq(0,ceiling(max(dt$Median, na.rm = TRUE))), las = 1)
text(x, dt$Median + 0.1, labels = format(round(dt$Median,2), nsmall = 2), col = col_wb)
if (is.na(dt$Median[length(dt$Median)])) text(x[length(x)], 1.5, "Matlab \n cannot \n read \n compressed \n files", srt=0, col = col_wb)
}
# Plotting both running times
loading <- rbind(R[operation == "read_uncompressed", c("language", "Median")][order(language)]$Median,
R[operation == "read_compressed", c("language","Median")][order(language)]$Median)
loading <- loading/min(loading, na.rm = TRUE)
rownames(loading) <- c("Uncompressed", "Compressed")
colnames(loading) <- sort(unique(R$language))
loading <- loading[,names(sort(loading[1,]))]
plot_two <- function(){
par(mar = c(2,2,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(loading, main = "Loading time relative to fastest", yaxt = "n", beside = TRUE,
col = c(co,co2), ylim = c(0,ceiling(max(loading, na.rm = TRUE))), border = F)
axis(2, seq(0,ceiling(max(loading, na.rm = TRUE))), las = 1)
text(x, loading + 0.1, labels = format(round(loading,2), nsmall = 2), col = col_wb)
legend("topleft", col = c(co, co2), legend = c("Uncompressed", "Compressed"),
pch = 15, bty = "n", text.col = col_wb)
if (is.na(loading["Compressed", "Matlab"])) text(x[length(x)]+0.2, 2, "Matlab \n cannot \n read \n compressed \n files", srt=0, cex = 0.8, col = col_wb)
}
# GARCH -------------------------------------------------------------------
garch <- fread("../garch/x.csv")
garch$time <- garch$time/min(garch$time)
garch <- garch[order(time), c("language", "time")]
garch$language <- c("C", "Rcpp", "Numba", "Julia", "Matlab", "R", "Python")
plot_garch <- function() {
par(mar = c(2.5,3.5,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(garch$time, names.arg = garch$language,  log = "y",
col = co, border = F, yaxt = "n", las = 1, ylim = c(0.5, 500),
main = "Calculation of GARCH log likelihood \n Relative to C")
offset <- rep(0.1,length(garch$time))
offset[length(garch$time)] <- 0
text(x-offset, garch$time*1.2, labels = format(round(garch$time,2), nsmall = 2), col = col_wb)
Ticks<-c(1,2,5,10, 20, 50, 100, 250, 500)
axis(2,at = Ticks, las = 1)
}
# Saving ------------------------------------------------------------------
# Parameters size
wid = 500
hei = 350
# Saving small png
png("png_small/uncompressed.png", width = wid, height = hei,
units = "px", pointsize = 14)
plot_vox(uncompressed, "Loading time relative to fastest - Uncompressed")
dev.off()
png("png_small/compressed.png", width = wid, height = hei,
units = "px", pointsize = 14)
plot_vox(compressed, "Loading time relative to fastest - Compressed")
dev.off()
png("png_small/processing.png", width = wid, height = hei,
units = "px", pointsize = 14)
plot_vox(process, paste("Annual mean and sd by year and firm", "\n", "Processing time relative to fastest"))
dev.off()
png("png_small/reading_time.png", width = wid, height = hei,
units = "px", pointsize = 12)
plot_two()
dev.off()
png("png_small/garch.png", width = wid, height = hei,
units = "px", pointsize = 12)
plot_garch()
dev.off()
# Large png
png("png_large/uncompressed.png", width = wid*2, height = hei*2,
units = "px", pointsize = 20)
plot_vox(uncompressed, "Loading time relative to fastest - Uncompressed")
dev.off()
png("png_large/compressed.png", width = wid*2, height = hei*2,
units = "px", pointsize = 20)
plot_vox(compressed, "Loading time relative to fastest - Compressed")
dev.off()
png("png_large/processing.png", width = wid*2, height = hei*2,
units = "px", pointsize = 20)
plot_vox(process, paste("Annual mean and sd by year and firm", "\n", "Relative processing time"))
dev.off()
png("png_large/reading_time.png", width = wid*2, height = hei*2,
units = "px", pointsize = 20)
plot_two()
dev.off()
png("png_large/garch.png", width = wid*2, height = hei*2,
units = "px", pointsize = 20)
plot_garch()
dev.off()
# Svg
svglite("svg/uncompressed.svg", bg = "transparent")
plot_vox(uncompressed, "Loading time relative to fastest - Uncompressed")
dev.off()
svglite("svg/compressed.svg", bg = "transparent")
plot_vox(compressed, "Loading time relative to fastest - Compressed")
dev.off()
svglite("svg/processing.svg", bg = "transparent")
plot_vox(process, paste("Annual mean and sd by year and firm", "\n", "Relative processing time"))
dev.off()
svglite("svg/reading_time.svg", bg = "transparent")
plot_two()
dev.off()
svglite("svg/garch.svg", bg = "transparent")
plot_garch()
dev.off()
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
install.packages("BIS")
library(svglite)
library(data.table)
library(RColorBrewer)
col_wb <- '#252627'
co <- brewer.pal(7, "Set1")[2]
co
col_wb <- '#252627'
co <- '#BB0A21'
data <- fread("../code/x.csv")
R <- data[,list(min(time), mean(time), median(time),
max(time)), keyby = list(language, operation)]
cols <-  c("Min", "Mean", "Median", "Max")
colnames(R)[3:6] <- cols
R <- R[,(cols) := round(.SD,1), .SDcols=cols]
extra_row <- data.frame("Matlab", "read_compressed", NA, NA, NA, NA)
names(extra_row) <- names(R)
R <- rbind(R, extra_row)
R[order(operation, Median)]
compressed <- R[operation == "read_compressed", c("language", "Median")]
compressed$Median <- compressed$Median/min(compressed$Median, na.rm = TRUE)
compressed <- compressed[order(Median)]
uncompressed <- R[operation == "read_uncompressed", c("language", "Median")]
uncompressed$Median <- uncompressed$Median/min(uncompressed$Median, na.rm = TRUE)
uncompressed <- uncompressed[order(Median)]
process <- R[operation == "process", c("language", "Median")]
process$Median <- process$Median/min(process$Median, na.rm = TRUE)
process <- process[order(Median)]
plot_vox <- function(dt, title) {
par(mar = c(2,2,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(dt$Median, names.arg = dt$language, main = title, yaxt = "n",
col = co, ylim = c(0,ceiling(max(dt$Median, na.rm = TRUE))), border = F)
axis(2, seq(0,ceiling(max(dt$Median, na.rm = TRUE))), las = 1)
text(x, dt$Median + 0.1, labels = format(round(dt$Median,2), nsmall = 2), col = col_wb)
if (is.na(dt$Median[length(dt$Median)])) text(x[length(x)], 1.5, "Matlab \n cannot \n read \n compressed \n files", srt=0, col = col_wb)
}
# Plotting both running times
loading <- rbind(R[operation == "read_uncompressed", c("language", "Median")][order(language)]$Median,
R[operation == "read_compressed", c("language","Median")][order(language)]$Median)
loading <- loading/min(loading, na.rm = TRUE)
rownames(loading) <- c("Uncompressed", "Compressed")
colnames(loading) <- sort(unique(R$language))
loading <- loading[,names(sort(loading[1,]))]
plot_two <- function(){
par(mar = c(2,2,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(loading, main = "Loading time relative to fastest", yaxt = "n", beside = TRUE,
col = c(co,co2), ylim = c(0,ceiling(max(loading, na.rm = TRUE))), border = F)
axis(2, seq(0,ceiling(max(loading, na.rm = TRUE))), las = 1)
text(x, loading + 0.1, labels = format(round(loading,2), nsmall = 2), col = col_wb)
legend("topleft", col = c(co, co2), legend = c("Uncompressed", "Compressed"),
pch = 15, bty = "n", text.col = col_wb)
if (is.na(loading["Compressed", "Matlab"])) text(x[length(x)]+0.2, 2, "Matlab \n cannot \n read \n compressed \n files", srt=0, cex = 0.8, col = col_wb)
}
garch <- fread("../garch/x.csv")
garch$time <- garch$time/min(garch$time)
garch <- garch[order(time), c("language", "time")]
garch$language <- c("C", "Rcpp", "Numba", "Julia", "Matlab", "R", "Python")
plot_garch <- function() {
par(mar = c(2.5,3.5,2,0))
par(bg=NA, col.axis = col_wb, col.lab = col_wb, col.main = col_wb, col.sub = col_wb)
x <- barplot(garch$time, names.arg = garch$language,  log = "y",
col = co, border = F, yaxt = "n", las = 1, ylim = c(0.5, 500),
main = "Calculation of GARCH log likelihood \n Relative to C")
offset <- rep(0.1,length(garch$time))
offset[length(garch$time)] <- 0
text(x-offset, garch$time*1.2, labels = format(round(garch$time,2), nsmall = 2), col = col_wb)
Ticks<-c(1,2,5,10, 20, 50, 100, 250, 500)
axis(2,at = Ticks, las = 1)
}
# Parameters size
wid = 500
hei = 350
plot_vox(uncompressed, "Loading time relative to fastest - Uncompressed")
# ghub
svglite("ghub/garch.svg", bg = "transparent")
plot_garch()
dev.off()
svglite("ghub/reading_time.svg", bg = "transparent")
plot_two()
dev.off()
plot_two()
dev.off()
plot_two()
co2 <- '#4B88A2'
plot_two()
svglite("ghub/reading_time.svg", bg = "transparent")
plot_two()
dev.off()
